sentence <- str_pad(string = input_text, width = 40, side = "left") %>%
tokenize_characters(strip_non_alphanum = FALSE, simplify = TRUE)
generated <- ""
for(i in 1:output_chars){
x <- sapply(chars, function(x){
as.integer(x == sentence)
})
x <- array_reshape(x, c(1, dim(x)))
preds <- predict(model, x)
next_index <- sample_mod(preds, diversity)
next_char <- chars[next_index]
generated <- str_c(generated, next_char, collapse = "")
sentence <- c(sentence[-1], next_char)
}
return(generated)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
# Application title
#titlePanel("Just a Minute"),
shinyUI(navbarPage("Just a Minute",
tabPanel("Predict Speech",
useShinyjs(),
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500),
sliderInput("temp",
label = "Temperature",
min = 0.01, max = 1, value = 0.18),
),
mainPanel(
fluidRow(
tags$h3(
"Leading text to generate output"
),
column(9,
textInput("init_text",
"",
placeholder = "up to 40 characters")
),
column(2,
tags$br(),
actionButton("generate", "Generate Text")
)
),
fluidRow(
column(9,
#verbatimTextOutput("next_text", placeholder = TRUE)
tags$h4(paste("Thus spake ...")),
textOutput("next_text")
),
column(2,
shinyjs::hidden(
actionButton("listen", "", icon = icon("music"))
)
)
),
fluidRow(
uiOutput("audiotag")
)
)
),
))
)
server <- function(input, output) {
txt <- ""
observeEvent(input$generate, {
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
output$next_text <- renderText({
progress <- shiny::Progress$new()
progress$set(message = "kanyAI is thinking...", value = .5)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
isolate(
txt <<- get_next_text(input$init_text, input$nchar, input$temp)
)
})
})
}
ui <- fluidPage(
# Application title
#titlePanel("Just a Minute"),
shinyUI(navbarPage("Just a Minute",
tabPanel("Predict Speech",
useShinyjs(),
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500),
sliderInput("temp",
label = "Temperature",
min = 0.01, max = 1, value = 0.18),
),
mainPanel(
fluidRow(
tags$h3(
"Leading text to generate output"
),
column(9,
textInput("init_text",
"",
placeholder = "up to 40 characters")
),
column(2,
tags$br(),
actionButton("generate", "Generate Text")
)
),
fluidRow(
column(9,
#verbatimTextOutput("next_text", placeholder = TRUE)
tags$h4(paste("Thus spake ...")),
textOutput("next_text")
),
column(2,
shinyjs::hidden(
actionButton("listen", "", icon = icon("music"))
)
)
),
fluidRow(
uiOutput("audiotag")
)
)
),
))
)
ui <- fluidPage(
# Application title
#titlePanel("Just a Minute"),
shinyUI(navbarPage("Just a Minute",
tabPanel("Predict Speech",
useShinyjs(),
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500),
sliderInput("temp",
label = "Temperature",
min = 0.01, max = 1, value = 0.18),
),
mainPanel(
fluidRow(
column(9,
textInput("init_text",
"",
placeholder = "up to 40 characters")
),
column(2,
actionButton("generate", "Generate Text")
)
),
fluidRow(
column(9,
textOutput("next_text")
)
),
fluidRow(
uiOutput("audiotag")
)
)
),
))
)
ui <- fluidPage(
# Application title
#titlePanel("Just a Minute"),
shinyUI(navbarPage("Just a Minute",
tabPanel("Predict Speech",
useShinyjs(),
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500),
sliderInput("temp",
label = "Temperature",
min = 0.01, max = 1, value = 0.18),
)
),
mainPanel(
fluidRow(
column(9,
textInput("init_text",
"",
placeholder = "up to 40 characters")
),
column(2,
actionButton("generate", "Generate Text")
)
),
fluidRow(
column(9,
textOutput("next_text")
)
),
fluidRow(
uiOutput("audiotag")
)
)
),
)
)
ui <- fluidPage(
# Application title
#titlePanel("Just a Minute"),
shinyUI(navbarPage("Just a Minute",
tabPanel("Predict Speech",
useShinyjs(),
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500),
sliderInput("temp",
label = "Temperature",
min = 0.01, max = 1, value = 0.18),
)
),
mainPanel(
fluidRow(
column(9,
textInput("init_text",
"",
placeholder = "up to 40 characters")
),
column(2,
actionButton("generate", "Generate Text")
)
),
fluidRow(
column(9,
textOutput("next_text")
)
)
)
),
)
)
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500),
sliderInput("temp",
label = "Temperature",
min = 0.01, max = 1, value = 0.18),
)
mainPanel(
fluidRow(
column(9,
textInput("init_text",
"",
placeholder = "up to 40 characters")
),
column(2,
actionButton("generate", "Generate Text")
)
),
fluidRow(
column(9,
textOutput("next_text")
)
)
)
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500))
ui <- fluidPage(
# Application title
#titlePanel("Just a Minute"),
shinyUI(navbarPage("Just a Minute",
tabPanel("Predict Speech",
useShinyjs(),
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500),
sliderInput("temp",
label = "Temperature",
min = 0.01, max = 1, value = 0.18)
)
),
mainPanel(
fluidRow(
column(9,
textInput("init_text",
"",
placeholder = "up to 40 characters")
),
column(2,
actionButton("generate", "Generate Text")
)
),
fluidRow(
column(9,
textOutput("next_text")
)
)
)
),
)
)
ui <- fluidPage(
# Application title
#titlePanel("Just a Minute"),
shinyUI(navbarPage("Just a Minute",
tabPanel("Predict Speech",
useShinyjs(),
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500),
sliderInput("temp",
label = "Temperature",
min = 0.01, max = 1, value = 0.18)
),
mainPanel(
fluidRow(
column(9,
textInput("init_text",
"",
placeholder = "up to 40 characters")
),
column(2,
actionButton("generate", "Generate Text")
)
),
fluidRow(
column(9,
textOutput("next_text")
)
)
)
),
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500),
sliderInput("temp",
label = "Temperature",
min = 0.01, max = 1, value = 0.18),
textInput("init_text",
"",
placeholder = "upto 40 characters"),
actionButton("go", "Go")
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sidebarPanel(
sliderInput("nchar",
label = "Output length (characters)",
min = 100, max = 1000, value = 500),
sliderInput("temp",
label = "Temperature",
min = 0.01, max = 1, value = 0.18),
textInput("init_text",
"",
placeholder = "upto 40 characters"),
actionButton("generate", "Generate Text")
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input_text <- "hold up nigga please"
sentence <- input_text
model <- load_model_hdf5('input/kanye')
chars <- readRDS('input/kanye_chars.rds')
if(str_length(sentence)>40){
sentence <- str_sub(sentence, end = -40)
}
sentence <- str_pad(string = input_text, width = 40, side = "left") %>%
tokenize_characters(strip_non_alphanum = FALSE, simplify = TRUE)
generated <- ""
for(i in 1:output_chars){
x <- sapply(chars, function(x){
as.integer(x == sentence)
})
x <- array_reshape(x, c(1, dim(x)))
preds <- predict(model, x)
next_index <- sample_mod(preds, diversity)
next_char <- chars[next_index]
generated <- str_c(generated, next_char, collapse = "")
sentence <- c(sentence[-1], next_char)
}
output_chars <- 400
for(i in 1:output_chars){
x <- sapply(chars, function(x){
as.integer(x == sentence)
})
x <- array_reshape(x, c(1, dim(x)))
preds <- predict(model, x)
next_index <- sample_mod(preds, diversity)
next_char <- chars[next_index]
generated <- str_c(generated, next_char, collapse = "")
sentence <- c(sentence[-1], next_char)
}
diversity <- 0.18
for(i in 1:output_chars){
x <- sapply(chars, function(x){
as.integer(x == sentence)
})
x <- array_reshape(x, c(1, dim(x)))
preds <- predict(model, x)
next_index <- sample_mod(preds, diversity)
next_char <- chars[next_index]
generated <- str_c(generated, next_char, collapse = "")
sentence <- c(sentence[-1], next_char)
}
generated
c(input_text, generated)
paste0(input_text, generated)
get_next_text <- function( input_text, output_chars, diversity = 1){
# Helper functions & Results ----------------------------------------------------
sample_mod <- function(preds, temperature = 1){
preds <- log(preds)/temperature
exp_preds <- exp(preds)
preds <- exp_preds/sum(exp(preds))
rmultinom(1, 1, preds) %>%
as.integer() %>%
which.max()
}
sentence <- input_text
#get the file path for the saves model file
# trained_model_file <- as.character(models[which(models[,1] == speaker),][,2])
model <- load_model_hdf5('input/kanye')
# chars_file <- as.character(models[which(models[,1] == speaker),][,3])
chars <- readRDS('input/kanye_chars.rds')
#truncate of pad left to make 40 character
if(str_length(sentence)>40){
sentence <- str_sub(sentence, end = -40)
}
sentence <- str_pad(string = input_text, width = 40, side = "left") %>%
tokenize_characters(strip_non_alphanum = FALSE, simplify = TRUE)
generated <- ""
for(i in 1:output_chars){
x <- sapply(chars, function(x){
as.integer(x == sentence)
})
x <- array_reshape(x, c(1, dim(x)))
preds <- predict(model, x)
next_index <- sample_mod(preds, diversity)
next_char <- chars[next_index]
generated <- str_c(generated, next_char, collapse = "")
sentence <- c(sentence[-1], next_char)
}
generated <- paste0(input_text, generated)
return(generated)
}
runApp()
runApp()
